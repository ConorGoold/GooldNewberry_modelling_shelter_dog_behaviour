proc.time() - startTime
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = list(delta=1),
chains = 1, warmup = nWarmup, iter = nIter)
proc.time() - startTime
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = function() {list(delta=1)},
chains = 1, warmup = nWarmup, iter = nIter)
proc.time() - startTime
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = function() {list(delta=1)},
chains = 1, warmup = nWarmup, iter = nIter)
proc.time() - startTime
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = function() {list(delta=1,beta_day=rep(0,2))},
chains = 1, warmup = nWarmup, iter = nIter)
proc.time() - startTime
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = init_list,
chains = nChains, warmup = nWarmup, iter = nIter, cores = nCores)
proc.time() - startTime
print(stan_fit , pars = display_params , digits_summary = 4 , probs = c(0.025, 0.975))
set.seed(12345)
sample_dogs <- sample(1:length(unique(my_data$id)),
length(unique(my_data$id)) ,       # <--- change line to a smaller number if subsetting
replace=FALSE)
stan_data <- my_data[my_data$id %in% sample_dogs, ]
stan_data$id <- rep(1:length(sample_dogs),
unlist(lapply(split(stan_data, stan_data$id), FUN = nrow)))
#=================================================================================
# standardise metric variables, denoted with a Z at the end of the name
#=================================================================================
stan_data$dayZ <- (stan_data$day - mean(stan_data$day)) / sd(stan_data$day)
stan_data$nObsZ <- (stan_data$nObs - mean(stan_data$nObs)) / sd(stan_data$nObs)
stan_data$resid_total_daysZ <- (stan_data$resid_total_days - mean(stan_data$resid_total_days)) / sd(stan_data$resid_total_days)
stan_data$mean_ageZ <- (stan_data$meanAge - mean(stan_data$meanAge)) / sd(stan_data$meanAge)
stan_data$weightZ <- (stan_data$weight - mean(stan_data$weight)) / sd(stan_data$weight)
#=================================================================================
# build dog-level predictor matrix (sum-to-zero deflections)
#=================================================================================
stan_data[, c("sex","sourceType","site","neutered")] <- apply(stan_data[,c("sex","sourceType","site","neutered")],
2 , as.factor )
X <- model.matrix( ~ nObsZ + resid_total_daysZ + mean_ageZ + weightZ + sex + sourceType + site + neutered ,
data = stan_data ,
contrasts.arg = list(sex = "contr.sum", sourceType = "contr.sum",
site = "contr.sum", neutered = "contr.sum"))[,-1]
#=================================================================================
# Stan data list
#=================================================================================
stan_data_list = list(y = stan_data$aggCodes , N = nrow(stan_data),
day = stan_data$dayZ , day2 = stan_data$dayZ^2,
X = X, P = ncol(X) ,
ID = stan_data$id, Nid = length(unique(stan_data$id)),
J = 6 , K = 5, L = 1.5, U = 5.5,
meanY = mean(stan_data$aggCodes))
#=================================================================================
# set Stan run specifics (using the full model)
#=================================================================================
stanModel <- "Stan_full_model.stan"
nIter = 500; nWarmup = 250; nChains = 4; nCores = 4
display_params <- c( "alpha", "beta_day", "sigmaID",
"Rho", "L_Rho",
"Beta1" , "Beta2" , "Beta3", "Beta4",
"delta" , "Beta_sigma"  ,
"thresh_raw", "thresh"
)
set.seed(12345)
sample_dogs <- sample(1:length(unique(my_data$id)),
length(unique(my_data$id)) ,       # <--- change line to a smaller number if subsetting
replace=FALSE)
stan_data <- my_data[my_data$id %in% sample_dogs, ]
stan_data$id <- rep(1:length(sample_dogs),
unlist(lapply(split(stan_data, stan_data$id), FUN = nrow)))
#=================================================================================
# standardise metric variables, denoted with a Z at the end of the name
#=================================================================================
stan_data$dayZ <- (stan_data$day - mean(stan_data$day)) / sd(stan_data$day)
stan_data$nObsZ <- (stan_data$nObs - mean(stan_data$nObs)) / sd(stan_data$nObs)
stan_data$resid_total_daysZ <- (stan_data$resid_total_days - mean(stan_data$resid_total_days)) / sd(stan_data$resid_total_days)
stan_data$mean_ageZ <- (stan_data$meanAge - mean(stan_data$meanAge)) / sd(stan_data$meanAge)
stan_data$weightZ <- (stan_data$weight - mean(stan_data$weight)) / sd(stan_data$weight)
#=================================================================================
# build dog-level predictor matrix (sum-to-zero deflections)
#=================================================================================
stan_data[, c("sex","sourceType","site","neutered")] <- apply(stan_data[,c("sex","sourceType","site","neutered")],
2 , as.factor )
X <- model.matrix( ~ nObsZ + resid_total_daysZ + mean_ageZ + weightZ + sex + sourceType + site + neutered ,
data = stan_data ,
contrasts.arg = list(sex = "contr.sum", sourceType = "contr.sum",
site = "contr.sum", neutered = "contr.sum"))[,-1]
#=================================================================================
# Stan data list
#=================================================================================
stan_data_list = list(y = stan_data$aggCodes , N = nrow(stan_data),
day = stan_data$dayZ , day2 = stan_data$dayZ^2,
X = X, P = ncol(X) ,
ID = stan_data$id, Nid = length(unique(stan_data$id)),
J = 6 , K = 5, L = 1.5, U = 5.5,
meanY = mean(stan_data$aggCodes))
#=================================================================================
# set Stan run specifics (using the full model)
#=================================================================================
stanModel <- "Stan_full_model.stan"
nIter = 100; nWarmup = 50; nChains = 4; nCores = 4
display_params <- c( "alpha", "beta_day", "sigmaID",
"Rho", "L_Rho",
"Beta1" , "Beta2" , "Beta3", "Beta4",
"delta" , "Beta_sigma"  ,
"thresh_raw", "thresh"
)
my_data <- read.csv("Raw_sample_data.csv")
# COLUMN NAMES: // id (id number for each dog),
#               // day (day since arrival)
#               // aggCodes (aggregated behaviour codes used for analysis)
#               // nObs (number of observations on each dog)
#               // total_days (total number of days at the shelter)
#               // meanAge (average age in years while at the shelter)
#               // sex
#               // weight (average weight in kg while at the shelter)
#               // neutered (neutered status - neutered on arrival, not neutered, on site, not examined)
#               // sourceType (how the dog arrived at the shelter: gift, stray, returned)
#               // site (which site the dogs were at: Battersea (London), Old Windsor, Brands Hatch)
#=================================================================================
# The number of observations and total number of days dogs were at the shelter
# are both of interest, but they are correlated with one another.
# -- Take the residuals of total_days instead with respect to nObs using a Gamma GLM.
#=================================================================================
my_data$resid_total_days <- residuals(glm(total_days+0.00001 ~ nObs , data = my_data , family = Gamma))
#=================================================================================
# Prepare the stan data. First, subset the data if running on smaller models
#=================================================================================
set.seed(12345)
sample_dogs <- sample(1:length(unique(my_data$id)),
length(unique(my_data$id)) ,       # <--- change line to a smaller number if subsetting
replace=FALSE)
stan_data <- my_data[my_data$id %in% sample_dogs, ]
stan_data$id <- rep(1:length(sample_dogs),
unlist(lapply(split(stan_data, stan_data$id), FUN = nrow)))
#=================================================================================
# standardise metric variables, denoted with a Z at the end of the name
#=================================================================================
stan_data$dayZ <- (stan_data$day - mean(stan_data$day)) / sd(stan_data$day)
stan_data$nObsZ <- (stan_data$nObs - mean(stan_data$nObs)) / sd(stan_data$nObs)
stan_data$resid_total_daysZ <- (stan_data$resid_total_days - mean(stan_data$resid_total_days)) / sd(stan_data$resid_total_days)
stan_data$mean_ageZ <- (stan_data$meanAge - mean(stan_data$meanAge)) / sd(stan_data$meanAge)
stan_data$weightZ <- (stan_data$weight - mean(stan_data$weight)) / sd(stan_data$weight)
#=================================================================================
# build dog-level predictor matrix (sum-to-zero deflections)
#=================================================================================
stan_data[, c("sex","sourceType","site","neutered")] <- apply(stan_data[,c("sex","sourceType","site","neutered")],
2 , as.factor )
X <- model.matrix( ~ nObsZ + resid_total_daysZ + mean_ageZ + weightZ + sex + sourceType + site + neutered ,
data = stan_data ,
contrasts.arg = list(sex = "contr.sum", sourceType = "contr.sum",
site = "contr.sum", neutered = "contr.sum"))[,-1]
#=================================================================================
# Stan data list
#=================================================================================
stan_data_list = list(y = stan_data$aggCodes , N = nrow(stan_data),
day = stan_data$dayZ , day2 = stan_data$dayZ^2,
X = X, P = ncol(X) ,
ID = stan_data$id, Nid = length(unique(stan_data$id)),
J = 6 , K = 5, L = 1.5, U = 5.5,
meanY = mean(stan_data$aggCodes))
#=================================================================================
# set Stan run specifics (using the full model)
#=================================================================================
stanModel <- "Stan_full_model.stan"
nIter = 100; nWarmup = 50; nChains = 4; nCores = 4
display_params <- c( "alpha", "beta_day", "sigmaID",
"Rho", "L_Rho",
"Beta1" , "Beta2" , "Beta3", "Beta4",
"delta" , "Beta_sigma"  ,
"thresh_raw", "thresh"
)
init_list = function(){
list( delta = 1, alpha = 0, beta_day = rep(0,2) ,
Beta1 = rep(0,ncol(X)) , Beta2=rep(0,ncol(X)) ,
Beta3=rep(0,ncol(X)), Beta4 = rep(0,ncol(X))
)
}
#=================================================================================
# run Stan: will take a few hours for the full data set
#=================================================================================
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = init_list,
chains = nChains, warmup = nWarmup, iter = nIter, cores = nCores)
proc.time() - startTime
print(stan_fit , pars = display_params , digits_summary = 4 , probs = c(0.025, 0.975))
exp(0.5164)
post_samples <- as.data.frame(stan_fit)
pred_vars <- post_samples[, grep("Beta", colnames(post_samples))]
names(pred_vars)
pred_vars <- pred_vars[, -ncol(pred_vars)]
colnames(pred_vars) <- c(paste(colnames(X), "_1", sep=""), paste(colnames(X), "_2", sep=""),
paste(colnames(X), "_3", sep=""), paste(colnames(X), "_4", sep=""))
age_comb <- aggregate(stan_data$mean_ageZ ~ stan_data$id, FUN = mean )[,2]
pred <- sapply(age_comb, function(z) post_samples$alpha + pred_vars$mean_ageZ_1*z )
pred_mu <- apply(pred, 2 , mean )
pred_hdi <- apply(pred, 2, function(z) HPDI(z, 0.95))
plot(apply(random_intercepts,2,mean) ~ aggregate(stan_data$meanAge ~ stan_data$id, FUN = mean )[,2] ,
col = col.alpha("black",0.2))
names(pred_vars)
pred_vars$Male_1 <- pred_vars$sex1_1*-1
pred_vars$Male_2 <- pred_vars$sex1_2*-1
pred_vars$Male_3 <- pred_vars$sex1_3*-1
pred_vars$Male_4 <- pred_vars$sex1_4*-1
pred_vars$Stray_1 <- (pred_vars$sourceType1_1 + pred_vars$sourceType2_1)*-1
pred_vars$Stray_2 <- (pred_vars$sourceType1_2 + pred_vars$sourceType2_2)*-1
pred_vars$Stray_3 <- (pred_vars$sourceType1_3 + pred_vars$sourceType2_3)*-1
pred_vars$Stray_4 <- (pred_vars$sourceType1_4 + pred_vars$sourceType2_4)*-1
pred_vars$BOW_1 <- (pred_vars$site1_1 + pred_vars$site2_1)*-1
pred_vars$BOW_2 <- (pred_vars$site1_2 + pred_vars$site2_2)*-1
pred_vars$BOW_3 <- (pred_vars$site1_3 + pred_vars$site2_3)*-1
pred_vars$BOW_4 <- (pred_vars$site1_4 + pred_vars$site2_4)*-1
p
table(X[,12])
table(X[,10])
names(X)
colnames(X)
table(stan_data$neutered)
table(X[,10])
table(X[,11])
table(X[,12])
pred_vars$Male_1 <- pred_vars$sex1_1*-1
pred_vars$Male_2 <- pred_vars$sex1_2*-1
pred_vars$Male_3 <- pred_vars$sex1_3*-1
pred_vars$Male_4 <- pred_vars$sex1_4*-1
pred_vars$Stray_1 <- (pred_vars$sourceType1_1 + pred_vars$sourceType2_1)*-1
pred_vars$Stray_2 <- (pred_vars$sourceType1_2 + pred_vars$sourceType2_2)*-1
pred_vars$Stray_3 <- (pred_vars$sourceType1_3 + pred_vars$sourceType2_3)*-1
pred_vars$Stray_4 <- (pred_vars$sourceType1_4 + pred_vars$sourceType2_4)*-1
pred_vars$BOW_1 <- (pred_vars$site1_1 + pred_vars$site2_1)*-1
pred_vars$BOW_2 <- (pred_vars$site1_2 + pred_vars$site2_2)*-1
pred_vars$BOW_3 <- (pred_vars$site1_3 + pred_vars$site2_3)*-1
pred_vars$BOW_4 <- (pred_vars$site1_4 + pred_vars$site2_4)*-1
pred_vars$neutYes_1 <- (pred_vars$neutered1_1+pred_vars$neutered2_1+pred_vars$neutered3_1)*-1
pred_vars$neutYes_2 <- (pred_vars$neutered1_1+pred_vars$neutered2_1+pred_vars$neutered3_1)*-1
pred_vars$neutYes_3 <- (pred_vars$neutered1_1+pred_vars$neutered2_1+pred_vars$neutered3_1)*-1
pred_vars$neutYes_4 <- (pred_vars$neutered1_1+pred_vars$neutered2_1+pred_vars$neutered3_1)*-1
melted_pred <- melt(pred_vars)
melted_pred$Predictor <- c(rep(c(rep(c("No. observations", "Total days", "Age", "Weight","Sex"), each=1e4),
rep(c("Source type", "Rehoming centre"), each=1e4*2),
rep("Neuter status", 1e4*3)), 4),
rep(c("Sex","Source type","Rehoming centre","Neuter status"), each=1e4*4))
each_N = nrow(post_samples)
melted_pred$Predictor <- c(rep(c(rep(c("No. observations", "Total days", "Age", "Weight","Sex"), each=each_N),
rep(c("Source type", "Rehoming centre"), each=each_N*2),
rep("Neuter status", each_N*3)), 4),
rep(c("Sex","Source type","Rehoming centre","Neuter status"), each=each_N*4))
melted_pred$type <- c(rep(c("Intercepts","Linear slopes","Quadratic slopes","Residual SDs"),
each= each_N*12),
rep(c("Intercepts","Linear slopes","Quadratic slopes","Residual SDs"),
each=each_N, 4))
contrasts_df <- with(pred_vars,
data.frame(
"Female.v.male_1" = sexCh1_1 - Male_1, "Female.v.male_2" = sexCh1_2 - Male_2,
"Female.v.male_3" = sexCh1_3 - Male_3, "Female.v.male_4" = sexCh1_4 - Male_4,
"Gift.v.return_1" = sourceType1_1 - sourceType2_1,
"Gift.v.return_2" = sourceType1_2 - sourceType2_2,
"Gift.v.return_3" = sourceType1_3 - sourceType2_3,
"Gift.v.return_4" = sourceType1_4 - sourceType2_4,
"Gift.v.stray_1" = sourceType1_1 - Stray_1, "Gift.v.stray_2" = sourceType1_2 - Stray_2,
"Gift.v.stray_3" = sourceType1_3 - Stray_3, "Gift.v.stray_4" = sourceType1_4 - Stray_4,
"Return.v.stray_1" = sourceType2_1 - Stray_1,"Return.v.stray_2" = sourceType2_2 - Stray_2,
"Return.v.stray_3" = sourceType2_3 - Stray_3,"Return.v.stray_4" = sourceType2_4 - Stray_4,
"BDCH.v.BOW_1" = site1_1 - BOW_1, "BDCH.v.BOW_2" = site1_2 - BOW_2,
"BDCH.v.BOW_3" = site1_3 - BOW_3, "BDCH.v.BOW_4" = site1_4 - BOW_4,
"BDCH.v.BBH_1" = site1_1 - site2_1, "BDCH.v.BBH_2" = site1_2 - site2_2,
"BDCH.v.BBH_3" = site1_3 - site2_3, "BDCH.v.BBH_4" = site1_4 - site2_4,
"BOW.v.BBH_1" = BOW_1 - site2_1, "BOW.v.BBH_2" = BOW_2 - site2_2,
"BOW.v.BBH_3" = BOW_3 - site2_3, "BOW.v.BBH_4" = BOW_4 - site2_4,
"N.v.NN_1" =  neuteredYes_1 - neutered1_1,
"N.v.NN_2" =  neuteredYes_2 - neutered1_2,
"N.v.NN_3" =  neuteredYes_3 - neutered1_3,
"N.v.NN_4" =  neuteredYes_4 - neutered1_4,
"N.v.NOS_1" =  neuteredYes_1 - neutered2_1,
"N.v.NOS_2" =  neuteredYes_2 - neutered2_2,
"N.v.NOS_3" =  neuteredYes_3 - neutered2_3,
"N.v.NOS_4" =  neuteredYes_4 - neutered2_4,
"NN.v.NOS_1" =   neutered1_1 - neutered2_1 ,
"NN.v.NOS_2" =   neutered1_2 - neutered2_2 ,
"NN.v.NOS_3" =   neutered1_3 - neutered2_3 ,
"NN.v.NOS_4" =   neutered1_4 - neutered2_4
)
)
contrasts_df <- with(pred_vars,
data.frame(
"Female.v.male_1" = sex1_1 - Male_1, "Female.v.male_2" = sex1_2 - Male_2,
"Female.v.male_3" = sex1_3 - Male_3, "Female.v.male_4" = sex1_4 - Male_4,
"Gift.v.return_1" = sourceType1_1 - sourceType2_1,
"Gift.v.return_2" = sourceType1_2 - sourceType2_2,
"Gift.v.return_3" = sourceType1_3 - sourceType2_3,
"Gift.v.return_4" = sourceType1_4 - sourceType2_4,
"Gift.v.stray_1" = sourceType1_1 - Stray_1, "Gift.v.stray_2" = sourceType1_2 - Stray_2,
"Gift.v.stray_3" = sourceType1_3 - Stray_3, "Gift.v.stray_4" = sourceType1_4 - Stray_4,
"Return.v.stray_1" = sourceType2_1 - Stray_1,"Return.v.stray_2" = sourceType2_2 - Stray_2,
"Return.v.stray_3" = sourceType2_3 - Stray_3,"Return.v.stray_4" = sourceType2_4 - Stray_4,
"BDCH.v.BOW_1" = site1_1 - BOW_1, "BDCH.v.BOW_2" = site1_2 - BOW_2,
"BDCH.v.BOW_3" = site1_3 - BOW_3, "BDCH.v.BOW_4" = site1_4 - BOW_4,
"BDCH.v.BBH_1" = site1_1 - site2_1, "BDCH.v.BBH_2" = site1_2 - site2_2,
"BDCH.v.BBH_3" = site1_3 - site2_3, "BDCH.v.BBH_4" = site1_4 - site2_4,
"BOW.v.BBH_1" = BOW_1 - site2_1, "BOW.v.BBH_2" = BOW_2 - site2_2,
"BOW.v.BBH_3" = BOW_3 - site2_3, "BOW.v.BBH_4" = BOW_4 - site2_4,
"N.v.NN_1" =  neuteredYes_1 - neutered1_1,
"N.v.NN_2" =  neuteredYes_2 - neutered1_2,
"N.v.NN_3" =  neuteredYes_3 - neutered1_3,
"N.v.NN_4" =  neuteredYes_4 - neutered1_4,
"N.v.NOS_1" =  neuteredYes_1 - neutered2_1,
"N.v.NOS_2" =  neuteredYes_2 - neutered2_2,
"N.v.NOS_3" =  neuteredYes_3 - neutered2_3,
"N.v.NOS_4" =  neuteredYes_4 - neutered2_4,
"NN.v.NOS_1" =   neutered1_1 - neutered2_1 ,
"NN.v.NOS_2" =   neutered1_2 - neutered2_2 ,
"NN.v.NOS_3" =   neutered1_3 - neutered2_3 ,
"NN.v.NOS_4" =   neutered1_4 - neutered2_4
)
)
contrasts_df <- with(pred_vars,
data.frame(
"Female.v.male_1" = sex1_1 - Male_1, "Female.v.male_2" = sex1_2 - Male_2,
"Female.v.male_3" = sex1_3 - Male_3, "Female.v.male_4" = sex1_4 - Male_4,
"Gift.v.return_1" = sourceType1_1 - sourceType2_1,
"Gift.v.return_2" = sourceType1_2 - sourceType2_2,
"Gift.v.return_3" = sourceType1_3 - sourceType2_3,
"Gift.v.return_4" = sourceType1_4 - sourceType2_4,
"Gift.v.stray_1" = sourceType1_1 - Stray_1, "Gift.v.stray_2" = sourceType1_2 - Stray_2,
"Gift.v.stray_3" = sourceType1_3 - Stray_3, "Gift.v.stray_4" = sourceType1_4 - Stray_4,
"Return.v.stray_1" = sourceType2_1 - Stray_1,"Return.v.stray_2" = sourceType2_2 - Stray_2,
"Return.v.stray_3" = sourceType2_3 - Stray_3,"Return.v.stray_4" = sourceType2_4 - Stray_4,
"BDCH.v.BOW_1" = site1_1 - BOW_1, "BDCH.v.BOW_2" = site1_2 - BOW_2,
"BDCH.v.BOW_3" = site1_3 - BOW_3, "BDCH.v.BOW_4" = site1_4 - BOW_4,
"BDCH.v.BBH_1" = site1_1 - site2_1, "BDCH.v.BBH_2" = site1_2 - site2_2,
"BDCH.v.BBH_3" = site1_3 - site2_3, "BDCH.v.BBH_4" = site1_4 - site2_4,
"BOW.v.BBH_1" = BOW_1 - site2_1, "BOW.v.BBH_2" = BOW_2 - site2_2,
"BOW.v.BBH_3" = BOW_3 - site2_3, "BOW.v.BBH_4" = BOW_4 - site2_4,
"N.v.NN_1" =  neutYes_1 - neutered1_1,
"N.v.NN_2" =  neutYes_2 - neutered1_2,
"N.v.NN_3" =  neutYes_3 - neutered1_3,
"N.v.NN_4" =  neutYes_4 - neutered1_4,
"N.v.NOS_1" =  neutYes_1 - neutered2_1,
"N.v.NOS_2" =  neutYes_2 - neutered2_2,
"N.v.NOS_3" =  neutYes_3 - neutered2_3,
"N.v.NOS_4" =  neutYes_4 - neutered2_4,
"NN.v.NOS_1" =   neutered1_1 - neutered2_1 ,
"NN.v.NOS_2" =   neutered1_2 - neutered2_2 ,
"NN.v.NOS_3" =   neutered1_3 - neutered2_3 ,
"NN.v.NOS_4" =   neutered1_4 - neutered2_4
)
)
contrasts_df
comb_df <- cbind(pred_vars[,c(1:4,13:16,25:28,37:40)], contrasts_df)
names(contrasts_df)
HPDI(contrasts_df[,1], 0.95)
HPDI(contrasts_df[,2], 0.95)
HPDI(contrasts_df[,3], 0.95)
HPDI(contrasts_df[,4], 0.95)
HPDI(contrasts_df[,29], 0.95)
HPDI(contrasts_df[,30], 0.95)
HPDI(contrasts_df[,32], 0.95)
HPDI(contrasts_df[,33], 0.95)
HPDI(contrasts_df[,36], 0.95)
mean(contrasts_df[,36])
setwd("~/Documents/PhD_NMBU/PaperIII/Submission_folder/GooldNewberry_modelling_shelter_dog_behaviour")
my_data <- read.csv("Raw_sample_data.csv")
# COLUMN NAMES: // id (id number for each dog),
#               // day (day since arrival)
#               // aggCodes (aggregated behaviour codes used for analysis)
#               // nObs (number of observations on each dog)
#               // total_days (total number of days at the shelter)
#               // meanAge (average age in years while at the shelter)
#               // sex
#               // weight (average weight in kg while at the shelter)
#               // neutered (neutered status - neutered on arrival, not neutered, on site, not examined)
#               // sourceType (how the dog arrived at the shelter: gift, stray, returned)
#               // site (which site the dogs were at: Battersea (London), Old Windsor, Brands Hatch)
#=================================================================================
# The number of observations and total number of days dogs were at the shelter
# are both of interest, but they are correlated with one another.
# -- Take the residuals of total_days instead with respect to nObs using a Gamma GLM.
#=================================================================================
my_data$resid_total_days <- residuals(glm(total_days+0.00001 ~ nObs , data = my_data , family = Gamma))
#=================================================================================
# Prepare the stan data. First, subset the data if running on smaller models
#=================================================================================
set.seed(12345)
sample_dogs <- sample(1:length(unique(my_data$id)),
500 ,       # <--- change line to a smaller number if subsetting
replace=FALSE)
stan_data <- my_data[my_data$id %in% sample_dogs, ]
stan_data$id <- rep(1:length(sample_dogs),
unlist(lapply(split(stan_data, stan_data$id), FUN = nrow)))
stan_data$dayZ <- (stan_data$day - mean(stan_data$day)) / sd(stan_data$day)
stan_data$nObsZ <- (stan_data$nObs - mean(stan_data$nObs)) / sd(stan_data$nObs)
stan_data$resid_total_daysZ <- (stan_data$resid_total_days - mean(stan_data$resid_total_days)) / sd(stan_data$resid_total_days)
stan_data$mean_ageZ <- (stan_data$meanAge - mean(stan_data$meanAge)) / sd(stan_data$meanAge)
stan_data$weightZ <- (stan_data$weight - mean(stan_data$weight)) / sd(stan_data$weight)
#=================================================================================
# build dog-level predictor matrix (sum-to-zero deflections)
#=================================================================================
stan_data[, c("sex","sourceType","site","neutered")] <- apply(stan_data[,c("sex","sourceType","site","neutered")],
2 , as.factor )
X <- model.matrix( ~ nObsZ + resid_total_daysZ + mean_ageZ + weightZ + sex + sourceType + site + neutered ,
data = stan_data ,
contrasts.arg = list(sex = "contr.sum", sourceType = "contr.sum",
site = "contr.sum", neutered = "contr.sum"))[,-1]
#=================================================================================
# Stan data list
#=================================================================================
stan_data_list = list(y = stan_data$aggCodes , N = nrow(stan_data),
day = stan_data$dayZ , day2 = stan_data$dayZ^2,
X = X, P = ncol(X) ,
ID = stan_data$id, Nid = length(unique(stan_data$id)),
J = 6 , K = 5, L = 1.5, U = 5.5,
meanY = mean(stan_data$aggCodes))
#=================================================================================
# set Stan run specifics (using the full model)
#=================================================================================
stanModel <- "Stan_full_model.stan"
nIter = 500; nWarmup = 250; nChains = 1
display_params <- c( "alpha", "beta_day", "sigmaID",
"Rho", "L_Rho",
"Beta1" , "Beta2" , "Beta3", "Beta4",
"delta" , "Beta_sigma"  ,
"thresh_raw", "thresh"
)
init_list = function(){
list( delta = 1, alpha = 0, beta_day = rep(0,2) ,
Beta1 = rep(0,ncol(X)) , Beta2=rep(0,ncol(X)) ,
Beta3=rep(0,ncol(X)), Beta4 = rep(0,ncol(X)),
thresh_raw = rep(0,4)
)
}
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = init_list,
chains = nChains, warmup = nWarmup, iter = nIter, cores = nCores)
proc.time() - startTime
init_list = function(){
list( delta = 1, alpha = 0, beta_day = rep(0,2) ,
Beta1 = rep(0,ncol(X)) , Beta2=rep(0,ncol(X)) ,
Beta3=rep(0,ncol(X)), Beta4 = rep(0,ncol(X))
)
}
#=================================================================================
# run Stan: will take a few hours for the full data set
#=================================================================================
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = init_list,
chains = nChains, warmup = nWarmup, iter = nIter, cores = nCores)
proc.time() - startTime
print(stan_fit , pars = display_params , digits_summary = 4 , probs = c(0.025, 0.975))
682.788/60
stanModel <- "Stan_full_model.stan"
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = init_list,
chains = nChains, warmup = nWarmup, iter = nIter, cores = nCores)
proc.time() - startTime
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = init_list,
chains = nChains, warmup = nWarmup, iter = nIter, cores = nCores)
proc.time() - startTime
709.838/60
set.seed(12345)
sample_dogs <- sample(1:length(unique(my_data$id)),
length(unique(my_data$id)) ,       # <--- change line to a smaller number if subsetting
replace=FALSE)
stan_data <- my_data[my_data$id %in% sample_dogs, ]
stan_data$id <- rep(1:length(sample_dogs),
unlist(lapply(split(stan_data, stan_data$id), FUN = nrow)))
stan_data$dayZ <- (stan_data$day - mean(stan_data$day)) / sd(stan_data$day)
stan_data$nObsZ <- (stan_data$nObs - mean(stan_data$nObs)) / sd(stan_data$nObs)
stan_data$resid_total_daysZ <- (stan_data$resid_total_days - mean(stan_data$resid_total_days)) / sd(stan_data$resid_total_days)
stan_data$mean_ageZ <- (stan_data$meanAge - mean(stan_data$meanAge)) / sd(stan_data$meanAge)
stan_data$weightZ <- (stan_data$weight - mean(stan_data$weight)) / sd(stan_data$weight)
#=================================================================================
# build dog-level predictor matrix (sum-to-zero deflections)
#=================================================================================
stan_data[, c("sex","sourceType","site","neutered")] <- apply(stan_data[,c("sex","sourceType","site","neutered")],
2 , as.factor )
X <- model.matrix( ~ nObsZ + resid_total_daysZ + mean_ageZ + weightZ + sex + sourceType + site + neutered ,
data = stan_data ,
contrasts.arg = list(sex = "contr.sum", sourceType = "contr.sum",
site = "contr.sum", neutered = "contr.sum"))[,-1]
#=================================================================================
# Stan data list
#=================================================================================
stan_data_list = list(y = stan_data$aggCodes , N = nrow(stan_data),
day = stan_data$dayZ , day2 = stan_data$dayZ^2,
X = X, P = ncol(X) ,
ID = stan_data$id, Nid = length(unique(stan_data$id)),
J = 6 , K = 5, L = 1.5, U = 5.5,
meanY = mean(stan_data$aggCodes))
stanModel <- "Stan_full_model.stan"
nIter = 5000; nWarmup = 2500; nChains = 4; nCores = 4
display_params <- c( "alpha", "beta_day", "sigmaID",
"Rho", "L_Rho",
"Beta1" , "Beta2" , "Beta3", "Beta4",
"delta" , "Beta_sigma"  ,
"thresh_raw", "thresh"
)
init_list = function(){
list( delta = 1, alpha = 0, beta_day = rep(0,2) ,
Beta1 = rep(0,ncol(X)) , Beta2=rep(0,ncol(X)) ,
Beta3=rep(0,ncol(X)), Beta4 = rep(0,ncol(X))
)
}
#=================================================================================
# run Stan: will take a few hours for the full data set
#=================================================================================
startTime = proc.time()
stan_fit <- stan(file = stanModel, data = stan_data_list, init = init_list,
chains = nChains, warmup = nWarmup, iter = nIter, cores = nCores)
